{"uid":"d578240e2c9518d3","name":"test_client_login_success","fullName":"tests.test_client_login#test_client_login_success","historyId":"ff82e629986af18f933210e4ef6852cb","time":{"start":1746611200059,"stop":1746611200059,"duration":0},"status":"failed","statusMessage":"AssertionError: Login failed: {\"error\":{\"status\":404,\"name\":\"INVALID CREDENTIALS\",\"message\":\"Incorrect credentials\"}}\nassert 404 == 200\n +  where 404 = <Response [404]>.status_code","statusTrace":"@pytest.fixture(scope=\"session\")\n    def client_login_response():\n        \"\"\"\n        Perform client login and return the full JSON response\n        \"\"\"\n        creds = load_credentials()\n    \n        url = f\"{BASE_URL}/api/v1/user/login\"\n        headers = {\n            \"accept\": \"application/json, text/plain, */*\",\n            \"accept-language\": \"en-US,en;q=0.9\",\n            \"content-type\": \"application/json\",\n            \"x-country-alpha-2\": \"KZ\",\n            \"x-language-alpha-2\": \"en\",\n            \"x-location\": \"Asia/Yerevan, AM\"\n        }\n    \n        payload = {\n            \"userType\": \"client\",\n            \"email\": creds[\"email\"],\n            \"password\": creds[\"password\"]\n        }\n    \n        response = requests.post(url, json=payload, headers=headers)\n>       assert response.status_code == 200, f\"Login failed: {response.text}\"\nE       AssertionError: Login failed: {\"error\":{\"status\":404,\"name\":\"INVALID CREDENTIALS\",\"message\":\"Incorrect credentials\"}}\nE       assert 404 == 200\nE        +  where 404 = <Response [404]>.status_code\n\nconftest.py:59: AssertionError","flaky":true,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"client_login_response","time":{"start":1746611200060,"stop":1746611201038,"duration":978},"status":"failed","statusMessage":"AssertionError: Login failed: {\"error\":{\"status\":404,\"name\":\"INVALID CREDENTIALS\",\"message\":\"Incorrect credentials\"}}\nassert 404 == 200\n +  where 404 = <Response [404]>.status_code\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/pluggy/_callers.py\", line 167, in _multicall\n    teardown.throw(outcome._exception)\n  File \"/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n            ^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/pluggy/_callers.py\", line 103, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 1140, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.11.12/x64/lib/python3.11/site-packages/_pytest/fixtures.py\", line 898, in call_fixture_func\n    fixture_result = fixturefunc(**kwargs)\n                     ^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/runner/work/api_demo_tests/api_demo_tests/conftest.py\", line 59, in client_login_response\n    assert response.status_code == 200, f\"Login failed: {response.text}\"\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_client_login"},{"name":"host","value":"fv-az798-685"},{"name":"thread","value":"3280-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_client_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":4,"broken":0,"skipped":0,"passed":7,"unknown":0,"total":11},"items":[{"uid":"b13cea258b1358f","status":"passed","time":{"start":1745852277847,"stop":1745852277847,"duration":0}},{"uid":"40e59e1dbdf742ae","status":"passed","time":{"start":1745851082511,"stop":1745851082511,"duration":0}},{"uid":"4ba84ecadb6b3802","status":"passed","time":{"start":1745850597727,"stop":1745850597728,"duration":1}},{"uid":"4201c5d7d1695923","status":"failed","statusDetails":"AssertionError: assert 'ClientTestUser' == 'ClientTestUser1'\n  \n  - ClientTestUser1\n  ?               -\n  + ClientTestUser","time":{"start":1745850197167,"stop":1745850197167,"duration":0}},{"uid":"b0282521dd02ba62","status":"passed","time":{"start":1745835695256,"stop":1745835695256,"duration":0}},{"uid":"c5d77896518d7ddf","status":"passed","time":{"start":1745507865270,"stop":1745507865271,"duration":1}},{"uid":"e52477c7d3445f7d","status":"passed","time":{"start":1745507535347,"stop":1745507535347,"duration":0}},{"uid":"e1449ee83d7985c0","status":"passed","time":{"start":1745507251009,"stop":1745507251009,"duration":0}},{"uid":"dba992baa1822762","status":"failed","statusDetails":"AssertionError: assert 'ClientTestUser' == 'ClientTestUser1'\n  \n  - ClientTestUser1\n  ?               -\n  + ClientTestUser","time":{"start":1745498830837,"stop":1745498830838,"duration":1}},{"uid":"182ec2a3593dc92e","status":"failed","statusDetails":"AssertionError: assert 'ClientTestUser' == 'ClientTestUser1'\n  \n  - ClientTestUser1\n  ?               -\n  + ClientTestUser","time":{"start":1745497219301,"stop":1745497219301,"duration":0}}]},"tags":[]},"source":"d578240e2c9518d3.json","parameterValues":[]}